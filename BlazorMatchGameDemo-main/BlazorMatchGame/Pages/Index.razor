@page "/"
@using System.Timers;

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>

@code {
    List<string> animalEmoji = new List<string>
{
        "🐶", "🐶", "🐺", "🐺", "🐮", "🐮", "🦊", "🦊", "🐱", "🐱", "🦁", "🦁", "🐯", "🐯", "🐹", "🐹"
    };

    List<string> shuffledAnimals = new List<string>();
    Dictionary<string, bool> visibilityStates = new Dictionary<string, bool>();
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;
    int fastestTime = int.MaxValue; // variable = fastest time
    int userDefinedInterval = 100; // Default user timer interval

    string lastAnimalFound = "";
    string lastDescription = "";

    protected override void OnInitialized()
    {
        timer = new Timer(userDefinedInterval);
        timer.Elapsed += Timer_Tick;
        SetUpGame();
    }

    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji.OrderBy(item => random.Next()).ToList();
        foreach (var animal in shuffledAnimals)
        {
            visibilityStates[animal] = false; // Initialize visibility states
        }
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
        timer.Start();
    }

    private void ButtonClick(string animal, string animalDescription)
    {
        if (!visibilityStates[animal])
        {
            visibilityStates[animal] = true; // Make the animal visible

            if (lastAnimalFound == string.Empty)
            {
                lastAnimalFound = animal;
                lastDescription = animalDescription;
            }
            else if ((lastAnimalFound == animal) && (lastDescription != animalDescription))
            {
                UpdateMatchFound(animal);
                visibilityStates[animal] = true; // Keep matched animals visible
            }
            else
            {
                Timer delayTimer = new Timer(1200);
                delayTimer.Elapsed += (sender, args) =>
                {
                    delayTimer.Stop();
                    visibilityStates[animal] = false;
                    visibilityStates[lastAnimalFound] = false;
                    lastAnimalFound = string.Empty;
                    InvokeAsync(StateHasChanged);
                };
                delayTimer.Start();
            }
        }
    }

    private void UpdateMatchFound(string animal)
    {
        lastAnimalFound = string.Empty;
        matchesFound++;
        if (matchesFound == 8)
        {
            timer.Stop();
            CheckAndUpdateFastestTime();
            timeDisplay = "Time: " + DisplayTime(tenthsOfSecondsElapsed) + " - Play Again?";
            SetUpGame();
        }
    }

    private void CheckAndUpdateFastestTime()
    {
        if (tenthsOfSecondsElapsed < fastestTime)
        {
            fastestTime = tenthsOfSecondsElapsed;
        }
    }

    private string DisplayFastestTime()
    {
        return fastestTime == int.MaxValue ? "N/A" : DisplayTime(fastestTime);
    }

    private string DisplayTime(int time)
    {
        return (time / 10F).ToString("0.0s");
    }

    private void Timer_Tick(object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = DisplayTime(tenthsOfSecondsElapsed);
            StateHasChanged();
        });
    }
}
